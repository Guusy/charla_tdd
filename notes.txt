TDD Notes :

Es un herramienta mas, lo importante es el como , el cuando y el que.

Partes del test ? (pregunta al publico)

- Nombres claros que indiquen las 3 cosas (precondiciones, operacion y un resultado)

- clases de equivalencias, casos de uso de tu codigo

unitarios -> prueban una sola entidad o solo objeto o funcion y son los mas sencillos y mas rapidos, son la base de la bateria de test

integracion ->  como funcionan diferentes abstracciones entre si

funcionales -> e2e :D

Ventajas
¿por que usar tdd ?

Desarrollo orientado al diseño (Simplicidad. Evitar sobre diseños. Interfaces amigables ):
Queda mas simple el diseño y por que empezamos a diseñar pensando en la interfaz y como queremos que contesten nuestros componente, por que el primer usuario
del componente vamos a hacer nosotros, mientras codeamos el test nos damos cuenta que tan facil es usarlo

Mejores tests (Tests cohesivos. Más rápidos. Evitamos tests redundantes y código sin testear)
Tiene una sola responsabilidad, nos permite entender mejor cuando algo falla, por que fallo.
Evitamos test redundantes y codigo sin testear.
si hacemos un test y da verde entonces nos adelantamos, o estamos probando algo que ya esta resuelto

Feedback inmediato (De requerimientos, implementación y diseño)
Al estar pensando en las diferentes clases de equivalencias, nos damos cuenta de los casos que no estan la definicion funcional y eso es super valioso
por que podemos levantar la mano en el medio del desarollo y decir "Aca nos esta faltando algo" y que esto dispare una charla con ux o con producto para 
poder ver ese caso, es una forma de retroalimentarse

Documentación actualizada (bueno para usuarios de nuestro proyecto, programadores nuevos, y para el code review)
Es la mejor Documentación del codigo ya que basicamente es lo que corre y da verde <3, si le metemos cabeza para que sean faciles de leer, uno puede entrar
y ver lo que hace el sistema, esto sirve para integrar personas al equipo

- Generan oportunidades para refactors
- Te genera curiosidad de los uso (podes preguntar a ux casos de equivalencias que despues son potenciales a salir en una demo)

TDD metodologia :
 - test que falle
 - codigo mas simple para que el test pase (unico objetivo) 
 - (posible refactor)
 - ver el test pasar ( optional : commit )

Los test son cohesivos y chicos.

Tips:

1) No adelantar refactors.
2) Si hacemos un test y da verde de una, entonces nos adelantamos.
3) Hacer commits chicos (cada 5 min), nos deja entender cuando se introduce un bug entre los commits
4) Representar contexto o precondiciones con codigo. (si tenemos contexto vacio es un bad smell)
5) Testear errores
    Nos interesa testear el error, ver que nuestro sistema falle
    ejemplo: un cambio de estado invalido
        -> que tire el error
        -> y que no se produzca el cambio (que nada de nuestro sistema alla cambiado)
6) Hacer tdd para corregir bugs.
    Es lo mejor ya que si podemos replicar el caso (bug) en un test podemos asegurarnos de que lo arreglamos


------


Cuando NO usar tdd

Problemas que involucran entidades externas
-Documentación anticuada. Tecnología críptica. Mucho overhead para hacer un test (mocks). Incertidumbre sobre la correctitud del sistema externo.


Sistema legacy sin tests



---- 
Hablar sobre la manera de escribir los tests

NO ES LO MISMO TENER 100% DE COBERTURA QUE HABER TESTEADO TODOS LOS CASOS

vamos a tener todos los casos testeados de nuestro codigo

Disclaimer : La gente dice, no pero me va a robar tiempo de codigo, voy a estar mil años haciendo los test y no voy a llegar a la demo, pero este tiempo que nos
saca tdd, es el tiempo que vamos a ahorrar cuando queramos cambiar algo y nuestro componente deje de funcionar y tengamos que empezar a debuggear o en su defecto
poner console.logs en todos lados AJAJAJ, tdd nos da seguridad, yo tengo un componente con 200 test y se que si cambio algo de la implementación tengo tests que me respaldan,
y cambiar el codigo ya a va a dejar de ser un miedo de romper lo que esta productivo o ya andaba.
Con practica el proceso se empieza a hacer mas rapido, alprincipio el lento ya aburrido, pero despues se notan los frutos

Lo ideal que despues de esta charla, tdd es una herramienta mas, por lo menos que la prueben y que evaluen como le va, las cosas nuevas nos generan resistencia.


---------------------



Hacer test de monto negativo !

Poner mas dibujos en las ppts.

que pasa si tenemos 2 equipos trabajando sobre la misma feature ?
si la funcionalidad que estamos codeando se choca con otra

- Aclarar el tema de tipado y de no tipado en el medio del workshop !

- Hablar sobre la importancia de los test, agregar ppts el caso del cohete a la luna y con radiacion

- Mirar a todas las personas también, no olvidarse de los que están remotos
- Cuando estés más cómodo si te animás podés hacerlo más improvisado, para que no sientan que está todo muy guiado 
y genere más engagement 

- Hacer participar mas a la gente, con mejores preguntas
